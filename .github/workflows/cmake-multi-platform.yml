name: build-imagec

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:
  build-linux:
    name: Build on Linux (${{ matrix.with-cuda == 'True' && 'With CUDA' || 'CPU Only' }})
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        with-cuda: ["True", "False"]
      container:
      image: joda001/imagec-dev:linux-latest
      credentials:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    env:
      TAG_NAME: "${{ github.ref_name }}"
      WITH_CUDA: ${{ matrix.with-cuda }}
      CONAN_IMAGEC_ARTIFACTORY_PW: ${{ secrets.CONAN_IMAGEC_ARTIFACTORY_PW }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build
        run: sudo ./build_linux.sh "$TAG_NAME" "$CONAN_IMAGEC_ARTIFACTORY_PW" "$WITH_CUDA" "$GITHUB_WORKSPACE"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: imagec-x64-linux-${{ matrix.with-cuda == 'True' && 'cuda' || 'cpu' }}
          include-hidden-files: true
          if-no-files-found: error
          path: build/build/output


  build-windows:
    name: Build on Windows (${{ matrix.with-cuda == 'True' && 'With CUDA' || 'CPU Only' }})
    runs-on: windows-2022
    strategy:
      matrix:
        with-cuda: ["True", "False"]
    env:
      TAG_NAME: "${{ github.ref_name }}"
      WITH_CUDA: ${{ matrix.with-cuda }}
      CONAN_IMAGEC_ARTIFACTORY_PW: ${{ secrets.CONAN_IMAGEC_ARTIFACTORY_PW }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Pull docker image
        run: docker pull joda001/imagec-dev:windows-latest

      - name: Build
        run: docker run --rm -v "${{ github.workspace }}":C:\app `
              -e TAG_NAME=${{ TAG_NAME }} `
              -e CONAN_IMAGEC_ARTIFACTORY_PW=${{ CONAN_IMAGEC_ARTIFACTORY_PW }} `
              -e WITH_CUDA=${{ WITH_CUDA }} `
              -e GITHUB_WORKSPACE=$env:GITHUB_WORKSPACE `
              -e USERPROFILE="C:\users\admin" `
              joda001/imagec-dev:windows-latest powershell -Command "cd C:\app && ./build_win.ps1"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: imagec-x64-win
          include-hidden-files: true
          if-no-files-found: error
          path: build/build/output

#     $env:USERPROFILE $env:GITHUB_WORKSPACE



build-macos:
    name: Build on MacOs (${{ matrix.with-cuda == 'True' && 'With CUDA' || 'CPU Only' }})
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Set up Conan
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Conan
        env:
          CONAN_IMAGEC_ARTIFACTORY_PW: ${{ secrets.CONAN_IMAGEC_ARTIFACTORY_PW }}
        run: |
          pip install conan
          conan remote remove conancenter
          conan remote add imageclibs https://imagec.org:4431/artifactory/api/conan/imageclibs
          conan remote login imageclibs writer -p $CONAN_IMAGEC_ARTIFACTORY_PW

      - name: Build with Conan
        run: |
          if [[ -f "/Users/runner/.conan2/profiles/default" ]]; then
            echo "Loaded from cache"
          else
            conan profile detect
          fi
          cat /Users/runner/.conan2/profiles/default
          conan install . \
            --profile conan/profile_macos \
            --output-folder=build \
            --build=missing -o:a '&:with_cuda=False'


      - name: Build imagec
        env:
          TAG_NAME: "${{ github.ref_name }}"
        run: |
          cd build
          cmake .. \
            -G "Unix Makefiles" \
            -DTAG_NAME="$TAG_NAME" \
            -DWITH_CUDA="OFF" \
            -DCMAKE_BUILD_TYPE="Release" \
            -DCMAKE_POLICY_DEFAULT_CMP0091=NEW \
            -DCMAKE_TOOLCHAIN_FILE="build/Release/generators/conan_toolchain.cmake"
          cmake --build . --config Release --target imagec --parallel 8

      - name: Prepare output
        run: |
          cd build/build
          mkdir -p output
          cd output
          mkdir -p ./plugins
          mkdir -p ./models
          cp -r ../imagec.app imagec.app
          cp -r /Users/runner/.conan2/p/*/p/./plugins/* ./plugins
          cp -r ${GITHUB_WORKSPACE}/resources/templates ./templates
          strip ./imagec.app/Contents/MacOS/imagec
          chmod +x ./imagec.app/Contents/MacOS/imagec
          chmod +x ./imagec.app
          mkdir -p imagec.app/Contents/MacOS/lib
          mkdir -p imagec.app/Contents/MacOS/java
          cd imagec.app/Contents/MacOS/lib
          cp /Users/runner/.conan2/p/*/p/lib/libQt6Core.6.dylib .
          cp /Users/runner/.conan2/p/*/p/lib/libQt6Gui.6.dylib .
          cp /Users/runner/.conan2/p/*/p/lib/libQt6Widgets.6.dylib .
          cp /Users/runner/.conan2/p/*/p/lib/libQt6Svg.6.dylib .
          cd ..
          cd java
          cp ${GITHUB_WORKSPACE}/resources/java/bioformats.jar .
          cp ${GITHUB_WORKSPACE}/resources/java/BioFormatsWrapper.class .
          mkdir -p jre_macos_arm
          cd jre_macos_arm
          cp -r ${GITHUB_WORKSPACE}/resources/java/jre_macos_arm.zip .
          unzip jre_macos_arm.zip
          rm -rf jre_macos_arm.zip


      - name: Sign Binaries
        shell: bash
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.OSX_CODESIGN_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.OSX_CODESIGN_P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.OSX_CODESIGN_KEYCHAIN_PASSWORD }}
        run: |
          if [[ "$GITHUB_REPOSITORY" = "joda01/imagec-sign" ]] ; then
            # create variables
            export CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
            export KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

            # import certificate and provisioning profile from secrets
            echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

            # create temporary keychain
            security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

            # import certificate to keychain
            security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
            security list-keychain -d user -s $KEYCHAIN_PATH

            codesign --all-architectures --force --sign "Developer ID Application: Joachim Danmayr" build/build/imagec
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: imagec-arm64-macos
          include-hidden-files: true
          if-no-files-found: error
          path: build/build/output





  deploy:
    needs:
      - build-windows
      - build-linux
      - build-macos
    runs-on: ubuntu-latest
    steps:

      - uses: actions/download-artifact@v4
        with:
          include-hidden-files: true
          name: imagec-x64-linux
          path: imagec-x64-linux

      - uses: actions/download-artifact@v4
        with:
          include-hidden-files: true
          name: imagec-arm64-macos
          path: imagec-arm64-macos

      - uses: actions/download-artifact@v4
        with:
          include-hidden-files: true
          name: imagec-x64-win
          path: imagec-x64-win

      - name: Rename files through architecture
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          chmod +x imagec-x64-linux/imagec
          chmod +x imagec-x64-linux/imagec.sh
          chmod +x imagec-arm64-macos/imagec.app/Contents/MacOS/imagec

          zip -r imagec-x64-linux-bundle.zip imagec-x64-linux
          zip -r imagec-x64-win-bundle.zip imagec-x64-win
          zip -r imagec-arm64-macos-bundle.zip imagec-arm64-macos
          
          
          timestamp=$(date +"%Y-%m-%d %H:%M:%S")
          hash_value_linux=$(sha256sum imagec-x64-linux/imagec | cut -d ' ' -f 1)
          hash_value_win=$(sha256sum imagec-x64-win/imagec.exe | cut -d ' ' -f 1)
          hash_value_macos=$(sha256sum imagec-arm64-macos/imagec.app/Contents/MacOS/imagec | cut -d ' ' -f 1)
          version="${GITHUB_REF#refs/tags/}"
          
          zip -r imagec-x64-linux-bin.zip imagec-x64-linux/imagec
          zip -r imagec-x64-win-bin.zip imagec-x64-win/imagec.exe
          zip -r imagec-arm64-macos-bin.zip imagec-arm64-macos/imagec.app

          json_string_linux=$(cat <<-EOF
          {
            "version": "$version",
            "sha256": "$hash_value_linux",
            "timestamp": "$timestamp"
          }
          EOF
          )
          
          json_string_win=$(cat <<-EOF
          {
            "version": "$version",
            "sha256": "$hash_value_win",
            "timestamp": "$timestamp"
          }
          EOF
          )

          json_string_macos=$(cat <<-EOF
          {
            "version": "$version",
            "sha256": "$hash_value_macos",
            "timestamp": "$timestamp"
          }
          EOF
          )

          echo "$json_string_linux"
          echo "$json_string_win"
          echo "$json_string_macos"

          echo "$json_string_linux" > imagec-x64-linux-bundle.json
          echo "$json_string_win" > imagec-x64-win-bundle.json
          echo "$json_string_macos" > imagec-arm64-macos-bundle.json

      - name: Upload Additional Files
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          generate_release_notes: true
          files: |
            imagec-x64-linux-bundle.zip
            imagec-x64-win-bundle.zip
            imagec-arm64-macos-bundle.zip
            imagec-x64-linux-bin.zip
            imagec-x64-win-bin.zip
            imagec-arm64-macos-bin.zip
      
      - name: Upload to imagec.org
        if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'alpha')
        env:
          SSH_KEY: ${{ secrets.SSH_KEY_IMAGEC }}
          SERVER_NAME : ${{ secrets.SERVER_NAME_IMAGEC }}
        run: |
          echo "$SSH_KEY" > ssh_key_for_github
          chmod 400 ssh_key_for_github
          scp -o StrictHostKeyChecking=no -i ssh_key_for_github imagec-x64-linux-bundle.zip github@$SERVER_NAME:/var/www/html/downloads/imagec-x64-linux-bundle.zip
          scp -o StrictHostKeyChecking=no -i ssh_key_for_github imagec-x64-linux-bundle.json github@$SERVER_NAME:/var/www/html/downloads/imagec-x64-linux-bundle.json
          scp -o StrictHostKeyChecking=no -i ssh_key_for_github imagec-x64-win-bundle.zip github@$SERVER_NAME:/var/www/html/downloads/imagec-x64-win-bundle.zip
          scp -o StrictHostKeyChecking=no -i ssh_key_for_github imagec-x64-win-bundle.json github@$SERVER_NAME:/var/www/html/downloads/imagec-x64-win-bundle.json
          scp -o StrictHostKeyChecking=no -i ssh_key_for_github imagec-arm64-macos-bundle.zip github@$SERVER_NAME:/var/www/html/downloads/imagec-arm64-macos-bundle.zip
          scp -o StrictHostKeyChecking=no -i ssh_key_for_github imagec-arm64-macos-bundle.json github@$SERVER_NAME:/var/www/html/downloads/imagec-arm64-macos-bundle.json
          rm -rf ssh_key_for_github
