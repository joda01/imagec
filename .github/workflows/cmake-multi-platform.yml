name: build-imagec

on:
  push:
    branches:
      - main
      - random_forest
    tags:
      - '*'
  pull_request:
    branches:
      - main



jobs:
  build-linux:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        with-cuda: ["True", "False"]  # This runs the job twice, once for each value
    env:
      TAG_NAME: "${{ github.ref_name }}"
      WITH_CUDA: ${{ matrix.with-cuda }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Conan
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Conan
        env:
          CONAN_IMAGEC_ARTIFACTORY_PW: ${{ secrets.CONAN_IMAGEC_ARTIFACTORY_PW }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libva-dev libvdpau-dev xkb-data
          sudo pip install conan 
          sudo chmod 777 -R /root
          sudo conan remote remove conancenter
          sudo conan remote add imageclibs https://imagec.org:4431/artifactory/api/conan/imageclibs
          sudo conan remote login imageclibs writer -p $CONAN_IMAGEC_ARTIFACTORY_PW


      - name: Install NVIDIA CUDA Toolkit
        if: matrix.with-cuda == 'True'
        run: |
          sudo wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt-get update
          sudo apt-get install -y cuda-toolkit-12-0


      - name: Build with Conan
        run: |
          if [[ -f "/root/.conan2/profiles/default" ]]; then
            echo "Loaded from cache"
          else
            sudo conan profile detect
          fi
          sudo cat /root/.conan2/profiles/default
          sudo conan install . \
            --profile conan/profile_linux \
            --output-folder=build \
            --build=missing \
            -o:a "&:with_cuda=${{ matrix.with-cuda }}"
          sudo chmod 777 -R /root/.conan2

      - name: Build imagec
        env:
          TAG_NAME: "${{ github.ref_name }}"
        run: |
          cd build
          sudo cmake .. \
            -G "Unix Makefiles" \
            -DTAG_NAME="$TAG_NAME" \
            -DWITH_CUDA="${{ matrix.with-cuda }}" \
            -DCMAKE_BUILD_TYPE="Release" \
            -DCMAKE_POLICY_DEFAULT_CMP0091=NEW \
            -DCMAKE_TOOLCHAIN_FILE="build/Release/generators/conan_toolchain.cmake" \
            -DCUDA_TOOLKIT_ROOT_DIR="/usr/local/cuda" \
            -DCMAKE_CUDA_COMPILER="/usr/local/cuda-12.0/bin/nvcc"
          sudo cmake --build . --config Release --target imagec --parallel 8
          
      - name: Prepare output
        run: |
          sudo chmod -R 777 build/build
          cd build/build
          mkdir -p output
          cd output
          mkdir -p ./plugins
          mkdir -p ./models
          mkdir -p ./lib
          mkdir -p ./java
          cp ../imagec imagec
          cp -r /root/.conan2/p/*/p/./plugins/* ./plugins
          cp -r ${GITHUB_WORKSPACE}/resources/templates ./templates
          cp ${GITHUB_WORKSPACE}/resources/launcher/imagec.sh imagec.sh
          cd lib
          cp /root/.conan2/p/*/p/lib/libQt6Core.so.6 .
          cp /root/.conan2/p/*/p/lib/libQt6Gui.so.6 .
          cp /root/.conan2/p/*/p/lib/libQt6Widgets.so.6 .
          cp /root/.conan2/p/*/p/lib/libQt6XcbQpa.so.6 .
          cp /root/.conan2/p/*/p/lib/libQt6Svg.so.6 .
          cp /root/.conan2/p/*/p/lib/libnuma.so.1 .
          cp /usr/lib/x86_64-linux-gnu/libxcb-cursor.so.0 .
          cp /lib/x86_64-linux-gnu/libbsd.so.0 .
          cp /lib/x86_64-linux-gnu/libmd.so.0 .
          cp /lib/x86_64-linux-gnu/libnuma.so.1 .
          cp /lib/x86_64-linux-gnu/libgomp.so.1 .
          cp /lib/x86_64-linux-gnu/libGL.so.1 .
          cp /lib/x86_64-linux-gnu/libxcb.so.1 .
          cp /lib/x86_64-linux-gnu/libGLdispatch.so.0 .
          cp /lib/x86_64-linux-gnu/libGLX.so.0 .
          cp /lib/x86_64-linux-gnu/libXau.so.6 .
          cp /lib/x86_64-linux-gnu/libXdmcp.so.6 .

          cp /root/.conan2/p/*/p/lib/libtorch_cpu.so .
          if [[ "${{ matrix.with-cuda }}" == "True" ]]; then
            cp /root/.conan2/p/*/p/lib/libtorch_cuda.so .
            cp /root/.conan2/p/*/p/lib/libtorch.so .
            cp /root/.conan2/p/*/p/lib/libc10.so .
            cp /root/.conan2/p/*/p/lib/libc10_cuda.so .
            cp /root/.conan2/p/*/p/lib/libgomp-98b21ff3.so.1 .
            cp /root/.conan2/p/*/p/lib/libcudart-d0da41ae.so.11.0 .
            cp /root/.conan2/p/*/p/lib/libcublas-3b81d170.so.11 .
            cp /root/.conan2/p/*/p/lib/libcublasLt-b6d14a74.so.11 .
            cp /root/.conan2/p/*/p/lib/libcudnn.so.9 .
            cp /root/.conan2/p/*/p/lib/libcudnn_graph.so.9 .
            cp /root/.conan2/p/*/p/lib/libcudnn_heuristic.so.9 .
            cp /root/.conan2/p/*/p/lib/libcudnn_engines_runtime_compiled.so.9 .
            cp /root/.conan2/p/*/p/lib/libcudnn_cnn.so.9 .
            cp /root/.conan2/p/*/p/lib/libcudnn_engines_precompiled.so.9 .
          fi
          
          cd ..
          strip imagec
          chmod +x imagec
          chmod +x imagec.sh
          cd java
          cp ${GITHUB_WORKSPACE}/resources/java/bioformats.jar .
          cp ${GITHUB_WORKSPACE}/resources/java/BioFormatsWrapper.class .
          cp -r ${GITHUB_WORKSPACE}/resources/java/jre_linux.zip .
          unzip jre_linux.zip
          rm -rf jre_linux.zip
          cd ..

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: imagec-x64-linux-${{ matrix.with-cuda == 'True' && 'cuda' || 'cpu' }}
          include-hidden-files: true
          if-no-files-found: error
          path: build/build/output


  build-macos:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Set up Conan
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Conan
        env:
          CONAN_IMAGEC_ARTIFACTORY_PW: ${{ secrets.CONAN_IMAGEC_ARTIFACTORY_PW }}
        run: |
          pip install conan
          conan remote remove conancenter
          conan remote add imageclibs https://imagec.org:4431/artifactory/api/conan/imageclibs
          conan remote login imageclibs writer -p $CONAN_IMAGEC_ARTIFACTORY_PW

      - name: Build with Conan
        run: |
          if [[ -f "/Users/runner/.conan2/profiles/default" ]]; then
            echo "Loaded from cache"
          else
            conan profile detect
          fi
          cat /Users/runner/.conan2/profiles/default
          conan install . --profile conan/profile_macos --output-folder=build --build=missing -o:a '&:with_cuda=False'


      - name: Build imagec
        env:
          TAG_NAME: "${{ github.ref_name }}"
        run: |
          cd build
          cmake .. -G "Unix Makefiles" -DTAG_NAME="$TAG_NAME" -DCMAKE_BUILD_TYPE="Release" -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_TOOLCHAIN_FILE="build/Release/generators/conan_toolchain.cmake"
          cmake --build . --config Release --target imagec --parallel 8

      - name: Prepare output
        run: |
          cd build/build
          mkdir -p output
          cd output
          mkdir -p ./plugins
          mkdir -p ./models
          cp -r ../imagec.app imagec.app
          cp -r /Users/runner/.conan2/p/*/p/./plugins/* ./plugins
          cp -r ${GITHUB_WORKSPACE}/resources/templates ./templates
          strip ./imagec.app/Contents/MacOS/imagec
          chmod +x ./imagec.app/Contents/MacOS/imagec
          chmod +x ./imagec.app
          mkdir -p imagec.app/Contents/MacOS/lib
          mkdir -p imagec.app/Contents/MacOS/java
          cd imagec.app/Contents/MacOS/lib
          cp /Users/runner/.conan2/p/*/p/lib/libQt6Core.6.dylib .
          cp /Users/runner/.conan2/p/*/p/lib/libQt6Gui.6.dylib .
          cp /Users/runner/.conan2/p/*/p/lib/libQt6Widgets.6.dylib .
          cp /Users/runner/.conan2/p/*/p/lib/libQt6Svg.6.dylib .
          cd ..
          cd java
          cp ${GITHUB_WORKSPACE}/resources/java/bioformats.jar .
          cp ${GITHUB_WORKSPACE}/resources/java/BioFormatsWrapper.class .
          mkdir -p jre_macos_arm
          cd jre_macos_arm
          cp -r ${GITHUB_WORKSPACE}/resources/java/jre_macos_arm.zip .
          unzip jre_macos_arm.zip
          rm -rf jre_macos_arm.zip


      - name: Sign Binaries
        shell: bash
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.OSX_CODESIGN_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.OSX_CODESIGN_P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.OSX_CODESIGN_KEYCHAIN_PASSWORD }}
        run: |
          if [[ "$GITHUB_REPOSITORY" = "joda01/imagec-sign" ]] ; then
            # create variables
            export CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
            export KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

            # import certificate and provisioning profile from secrets
            echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

            # create temporary keychain
            security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

            # import certificate to keychain
            security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
            security list-keychain -d user -s $KEYCHAIN_PATH

            codesign --all-architectures --force --sign "Developer ID Application: Joachim Danmayr" build/build/imagec
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: imagec-arm64-macos
          include-hidden-files: true
          if-no-files-found: error
          path: build/build/output

  build-windows:
    runs-on: windows-2022
    strategy:
      matrix:
        with-cuda: ["True", "False"]  # This runs the job twice, once for each value
    env:
      TAG_NAME: "${{ github.ref_name }}"
      WITH_CUDA: ${{ matrix.with-cuda }}


    steps:
      - uses: actions/checkout@v4

      - name: Set up Conan
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Conan
        env:
          CONAN_IMAGEC_ARTIFACTORY_PW: ${{ secrets.CONAN_IMAGEC_ARTIFACTORY_PW }}
        run: |
          pip install conan
          pip install numpy
          conan remote remove conancenter
          conan remote add imageclibs https://imagec.org:4431/artifactory/api/conan/imageclibs
          conan remote login imageclibs writer -p "$env:CONAN_IMAGEC_ARTIFACTORY_PW"


      - name: Install NVIDIA CUDA Toolkit
        if: matrix.with-cuda == 'True'
        run: |
          choco install cuda --version=12.0.0 --yes --limit-output


      - name: Build with Conan
        run: |
          $cudaFlag = if ($env:WITH_CUDA -eq 'True') { 'True' } else { 'False' }

          if (Test-Path "C:\Users\runneradmin\.conan2\profiles\default") {
            Write-Host "Loaded from cache!"
          } else {
            conan profile detect
          }
          
          conan install . `
            --profile $env:GITHUB_WORKSPACE\conan\profile_win `
            --output-folder=build `
            --build=missing `
            -o:a "&:with_cuda=$cudaFlag"

      - name: Build imagec
        env:
          TAG_NAME: "${{ github.ref_name }}"
        run: |    
          cd D:\a\imagec\imagec\build
          cmake .. `
            -G "Visual Studio 17 2022" `
            -DTAG_NAME="$env:TAG_NAME" `
            -DCMAKE_SH=CMAKE_SH-NOTFOUND `
            -DCMAKE_POLICY_DEFAULT_CMP0091=NEW `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE="build/generators/conan_toolchain.cmake" `
            -DWITH_CUDA="$cudaFlag" `
            -DCUDA_TOOLKIT_ROOT_DIR="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.0" `
            -DCMAKE_CUDA_COMPILER="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v12.0/bin/nvcc.exe"
          cmake --build . --config Release --target imagec --parallel 8

      - name: Prepare output
        run: |
          cd build/build
          strip "D:\a\imagec\imagec\build\build\Release\imagec.exe"
          ni "output" -ItemType Directory
          cd output
          ni "plugins" -ItemType Directory
          ni "models" -ItemType Directory
          ni "java" -ItemType Directory
          Copy-Item -Path "D:\a\imagec\imagec\build\build\Release\imagec.exe" -Destination "imagec.exe"
          
          $qtInstallPath = "C:\Users\runneradmin\.conan2\p"

          Get-ChildItem -Path "$qtInstallPath\*" | Where-Object {$_.Name -like "qt*"} | ForEach-Object {
            $pathToCopyFrom = $qtInstallPath + "\" + $_.Name + "\p\.\plugins\*"
            if (Test-Path "$pathToCopyFrom") {
              Copy-Item -Recurse -Path $pathToCopyFrom -Destination "./plugins"  -Force
            }
          }

          Get-ChildItem -Path "$qtInstallPath\*" | Where-Object {$_.Name -like "qt*"} | ForEach-Object {
            $pathToCopyFrom = $qtInstallPath + "\" + $_.Name + "\p\bin\Qt6Core.dll"
            if (Test-Path "$pathToCopyFrom") {
              Copy-Item -Path $pathToCopyFrom -Destination "."  -Force
            }
          }

          Get-ChildItem -Path "$qtInstallPath\*" | Where-Object {$_.Name -like "qt*"} | ForEach-Object {
            $pathToCopyFrom = $qtInstallPath + "\" + $_.Name + "\p\bin\Qt6Gui.dll"
            if (Test-Path "$pathToCopyFrom") {
              Copy-Item -Path $pathToCopyFrom -Destination "."  -Force 
            }
          }
          
          Get-ChildItem -Path "$qtInstallPath\*" | Where-Object {$_.Name -like "qt*"} | ForEach-Object {
            $pathToCopyFrom = $qtInstallPath + "\" + $_.Name + "\p\bin\Qt6Widgets.dll"
            if (Test-Path "$pathToCopyFrom") {
              Copy-Item -Path $pathToCopyFrom -Destination "."  -Force 
            }
          }

          Get-ChildItem -Path "$qtInstallPath\*" | Where-Object {$_.Name -like "qt*"} | ForEach-Object {
            $pathToCopyFrom = $qtInstallPath + "\" + $_.Name + "\p\bin\Qt6Svg.dll"
            if (Test-Path "$pathToCopyFrom") {
              Copy-Item -Path $pathToCopyFrom -Destination "."  -Force 
            }
          }
          
          ls "C:\Windows\System32"
          Copy-Item -Path "C:\Windows\System32\vcruntime140.dll" -Destination "."  -Force
          Copy-Item -Path "C:\Windows\System32\vcruntime140_1.dll" -Destination "."  -Force
          Copy-Item -Path "C:\Windows\System32\msvcp140.dll" -Destination "."  -Force
          Copy-Item -Path "C:\Windows\System32\msvcp140_1.dll" -Destination "."  -Force
          Copy-Item -Path "C:\Windows\System32\msvcp140_2.dll" -Destination "."  -Force
          Copy-Item -Path "C:\Windows\System32\concrt140.dll" -Destination "."  -Force
          Copy-Item -Path "C:\Windows\System32\msvcp140_codecvt_ids.dll" -Destination "."  -Force
          Copy-Item -Path "C:\Windows\System32\vcomp140.dll" -Destination "."  -Force


          Copy-Item -Recurse -Path "$env:GITHUB_WORKSPACE/resources/templates" ./templates
          cd java
          Copy-Item -Recurse -Path "$env:GITHUB_WORKSPACE/resources/java/bioformats.jar" -Destination "."
          Copy-Item -Recurse -Path "$env:GITHUB_WORKSPACE/resources/java/BioFormatsWrapper.class" -Destination "."
          Copy-Item -Recurse -Path "$env:GITHUB_WORKSPACE/resources/java/jre_win.zip" -Destination "."
          Expand-Archive "jre_win.zip" -DestinationPath "."
          Remove-Item jre_win.zip
          cd ..

      - name: Sign Binaries
        env:
          PRIV_KEY: ${{ secrets.PRIV_KEY }}
          PUB_KEY: ${{ secrets.PUB_KEY }}
        run: |
          if ($env:GITHUB_REPOSITORY -eq "joda01/imagec-sign") {
            "$env:PRIV_KEY" | Set-Content -Path privkey.key
            "$env:PUB_KEY" | Set-Content -Path pubkey.pem
            cd build/build
            openssl pkcs12 -password pass: -inkey privkey.key -in pubkey.pem -export -out mycert.pfx
            & "C:/Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/signtool.exe" sign /fd SHA256 /td sha256 /f "mycert.pfx" /tr http://timestamp.digicert.com "imagec.exe"
            Remove-Item -Force mycert.pfx
            Remove-Item -Force privkey.key
            Remove-Item -Force pubkey.pem
          }

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: imagec-x64-win
          include-hidden-files: true
          if-no-files-found: error
          path: build/build/output



  deploy:
    needs:
      - build-windows
      - build-linux
      - build-macos
    runs-on: ubuntu-latest
    steps:

      - uses: actions/download-artifact@v4
        with:
          include-hidden-files: true
          name: imagec-x64-linux
          path: imagec-x64-linux

      - uses: actions/download-artifact@v4
        with:
          include-hidden-files: true
          name: imagec-arm64-macos
          path: imagec-arm64-macos

      - uses: actions/download-artifact@v4
        with:
          include-hidden-files: true
          name: imagec-x64-win
          path: imagec-x64-win

      - name: Rename files through architecture
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          chmod +x imagec-x64-linux/imagec
          chmod +x imagec-x64-linux/imagec.sh
          chmod +x imagec-arm64-macos/imagec.app/Contents/MacOS/imagec

          zip -r imagec-x64-linux-bundle.zip imagec-x64-linux
          zip -r imagec-x64-win-bundle.zip imagec-x64-win
          zip -r imagec-arm64-macos-bundle.zip imagec-arm64-macos
          
          
          timestamp=$(date +"%Y-%m-%d %H:%M:%S")
          hash_value_linux=$(sha256sum imagec-x64-linux/imagec | cut -d ' ' -f 1)
          hash_value_win=$(sha256sum imagec-x64-win/imagec.exe | cut -d ' ' -f 1)
          hash_value_macos=$(sha256sum imagec-arm64-macos/imagec.app/Contents/MacOS/imagec | cut -d ' ' -f 1)
          version="${GITHUB_REF#refs/tags/}"
          
          zip -r imagec-x64-linux-bin.zip imagec-x64-linux/imagec
          zip -r imagec-x64-win-bin.zip imagec-x64-win/imagec.exe
          zip -r imagec-arm64-macos-bin.zip imagec-arm64-macos/imagec.app

          json_string_linux=$(cat <<-EOF
          {
            "version": "$version",
            "sha256": "$hash_value_linux",
            "timestamp": "$timestamp"
          }
          EOF
          )
          
          json_string_win=$(cat <<-EOF
          {
            "version": "$version",
            "sha256": "$hash_value_win",
            "timestamp": "$timestamp"
          }
          EOF
          )

          json_string_macos=$(cat <<-EOF
          {
            "version": "$version",
            "sha256": "$hash_value_macos",
            "timestamp": "$timestamp"
          }
          EOF
          )

          echo "$json_string_linux"
          echo "$json_string_win"
          echo "$json_string_macos"

          echo "$json_string_linux" > imagec-x64-linux-bundle.json
          echo "$json_string_win" > imagec-x64-win-bundle.json
          echo "$json_string_macos" > imagec-arm64-macos-bundle.json

      - name: Upload Additional Files
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          generate_release_notes: true
          files: |
            imagec-x64-linux-bundle.zip
            imagec-x64-win-bundle.zip
            imagec-arm64-macos-bundle.zip
            imagec-x64-linux-bin.zip
            imagec-x64-win-bin.zip
            imagec-arm64-macos-bin.zip
      
      - name: Upload to imagec.org
        if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'alpha')
        env:
          SSH_KEY: ${{ secrets.SSH_KEY_IMAGEC }}
          SERVER_NAME : ${{ secrets.SERVER_NAME_IMAGEC }}
        run: |
          echo "$SSH_KEY" > ssh_key_for_github
          chmod 400 ssh_key_for_github
          scp -o StrictHostKeyChecking=no -i ssh_key_for_github imagec-x64-linux-bundle.zip github@$SERVER_NAME:/var/www/html/downloads/imagec-x64-linux-bundle.zip
          scp -o StrictHostKeyChecking=no -i ssh_key_for_github imagec-x64-linux-bundle.json github@$SERVER_NAME:/var/www/html/downloads/imagec-x64-linux-bundle.json
          scp -o StrictHostKeyChecking=no -i ssh_key_for_github imagec-x64-win-bundle.zip github@$SERVER_NAME:/var/www/html/downloads/imagec-x64-win-bundle.zip
          scp -o StrictHostKeyChecking=no -i ssh_key_for_github imagec-x64-win-bundle.json github@$SERVER_NAME:/var/www/html/downloads/imagec-x64-win-bundle.json
          scp -o StrictHostKeyChecking=no -i ssh_key_for_github imagec-arm64-macos-bundle.zip github@$SERVER_NAME:/var/www/html/downloads/imagec-arm64-macos-bundle.zip
          scp -o StrictHostKeyChecking=no -i ssh_key_for_github imagec-arm64-macos-bundle.json github@$SERVER_NAME:/var/www/html/downloads/imagec-arm64-macos-bundle.json
          rm -rf ssh_key_for_github
